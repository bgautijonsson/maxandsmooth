// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fit_gev
Rcpp::List fit_gev(Eigen::MatrixXd& data, Eigen::VectorXd& index, Eigen::VectorXd& n_values, Eigen::VectorXd& values, double log_det);
RcppExport SEXP _maxandsmooth_fit_gev(SEXP dataSEXP, SEXP indexSEXP, SEXP n_valuesSEXP, SEXP valuesSEXP, SEXP log_detSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type n_values(n_valuesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< double >::type log_det(log_detSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_gev(data, index, n_values, values, log_det));
    return rcpp_result_gen;
END_RCPP
}
// ms_max
Rcpp::List ms_max(Eigen::MatrixXd& data, std::string& family);
RcppExport SEXP _maxandsmooth_ms_max(SEXP dataSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(ms_max(data, family));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_maxandsmooth_fit_gev", (DL_FUNC) &_maxandsmooth_fit_gev, 5},
    {"_maxandsmooth_ms_max", (DL_FUNC) &_maxandsmooth_ms_max, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_maxandsmooth(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gev_mle
Eigen::Vector3d gev_mle(const Eigen::VectorXd& data);
RcppExport SEXP _maxandsmooth_gev_mle(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(gev_mle(data));
    return rcpp_result_gen;
END_RCPP
}
// gev_mle_matrix
Eigen::MatrixXd gev_mle_matrix(const Eigen::MatrixXd& data);
RcppExport SEXP _maxandsmooth_gev_mle_matrix(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(gev_mle_matrix(data));
    return rcpp_result_gen;
END_RCPP
}
// smooth_samples
Eigen::MatrixXd smooth_samples(const Eigen::MatrixXd& estimates, const std::vector<Eigen::MatrixXd>& precision_matrices, const Rcpp::List& params);
RcppExport SEXP _maxandsmooth_smooth_samples(SEXP estimatesSEXP, SEXP precision_matricesSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type estimates(estimatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type precision_matrices(precision_matricesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_samples(estimates, precision_matrices, params));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_maxandsmooth_gev_mle", (DL_FUNC) &_maxandsmooth_gev_mle, 1},
    {"_maxandsmooth_gev_mle_matrix", (DL_FUNC) &_maxandsmooth_gev_mle_matrix, 1},
    {"_maxandsmooth_smooth_samples", (DL_FUNC) &_maxandsmooth_smooth_samples, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_maxandsmooth(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
